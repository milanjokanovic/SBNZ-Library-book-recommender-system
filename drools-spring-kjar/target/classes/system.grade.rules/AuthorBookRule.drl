package authorbooks

//list any import classes here.

import rs.sbnz.book_recommender.model.Book;
import rs.sbnz.book_recommender.model.Author;
import rs.sbnz.book_recommender.model.User;
import rs.sbnz.book_recommender.model.Score;
import timeNow.CurrentTimeData
import java.util.Date;
import java.util.List;
import base3.*;

//declare any global variables here


rule "Reset Author Grade"
	agenda-group "Level4"
    no-loop
    salience 9
    when
    	$a: Author() @Watch(!systemGrade)
    then
    	modify($a){setSystemGrade(0)}
end



rule "Author grade from books"
	agenda-group "Level4"
    no-loop
    salience 8
    when
    	$b: Book(bookId: id, title: title, bookGrade: getSystemGrade())
    	$a: Author(grade: getSystemGrade(), $bookList: books)
    	Long(intValue == 1)from accumulate(Book($bi: this, bookId==id) from $bookList,
	        count($bi))
    then
        modify($a){setSystemGrade(grade + bookGrade)}
end

rule "Author grade with favorite users coeficient"
    agenda-group "Level5"
    no-loop
    salience 10
    when
        $c: Integer()
        $t: CurrentTimeData(now: now, $activityDate: activityDate.getTime())
   	 	$a: Author(bookList: books, userList: favoredByUsers, grade: getSystemGrade()) @Watch(!systemGrade)
   	 	userActive($activityDate, userList, $num;)
   	 	eval($num.intValue() >= ($c /  10))
    then
        modify($a){setSystemGrade(0.8 * (grade / bookList.size()) + 1)}
end

rule "Author grade from without favorite users coeficient"
    agenda-group "Level5"
    no-loop
    salience 10
    when
        $c: Integer()
        $t: CurrentTimeData(now: now, $activityDate: activityDate.getTime())
   	 	$a: Author(bookList: books, userList: favoredByUsers, grade: getSystemGrade()) @Watch(!systemGrade)
   	 	userActive($activityDate, userList, $num;)
   	 	eval($num.intValue() < ($c /  10))
    then
        modify($a){setSystemGrade(0.8 * (grade / bookList.size()))}
end

rule "Author grade no favorite users"
    agenda-group "Level5"
    no-loop
    salience 10
    when
        $t: CurrentTimeData(now: now, $activityDate: activityDate.getTime())
   	 	$a: Author(bookList: books, userList: favoredByUsers, grade: getSystemGrade()) @Watch(!systemGrade)
   	 	not userActive($activityDate, userList, $num;)

    then
        modify($a){setSystemGrade(0.8 * (grade / bookList.size()))}
end

rule "Author mostly writes series with high scores"
    agenda-group "Level5"
    no-loop
    salience 5
    when
        $a: Author($books: books, grade: getSystemGrade()) @Watch(!systemGrade)
        accumulate(
         	Book($b: this, seriesNumber > 0, $scores: score) from $books and
         	List(size > ($scores.size() / 2)) from collect(
         		Score(value > 6) from $scores
         	),
         	$seriesBooks: collectList($b)
         )
         eval($seriesBooks.size() > ($books.size() / 3))
    then
        modify($a){setSystemGrade(grade + 1)}
end