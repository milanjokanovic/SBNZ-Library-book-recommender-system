import rs.sbnz.book_recommender.model.User
import rs.sbnz.book_recommender.model.Book
import rs.sbnz.book_recommender.model.Genre
import rs.sbnz.book_recommender.model.facts.SubjectUser
import java.util.List;

declare OtherUserScorer
@propertyReactive
    id: Integer
    count : Integer
    score: Double
end

rule "Creating other user scorer"
	agenda-group "OtherUserScore"
	no-loop
	salience 8
    when
        $user: User(userId: id)
        not OtherUserScorer(id == userId)
    then
        OtherUserScorer scorer = new OtherUserScorer();
	    scorer.setId(userId);
	    scorer.setCount(0);
	    scorer.setScore(0.0);
	    insert(scorer);

end

rule "Calculate averages"
  agenda-group "OtherUserScore"
  no-loop
  salience 7
  when
      $book: Book()
      $subjectUser: SubjectUser($book memberOf user.getReadBooks())
      $user: User($book memberOf readBooks)
      $avgSubject: Score(user.getId() == $subjectUser.getUser().getId()) from $book.getScore()
      $avgUser: Score(user.getId() == $user.getId()) from $book.getScore()
      $ouc: OtherUserScorer($scorerId: id, $scorerId == $user.getId(), $cnt: count, $scr: score) @Watch(!*)
  then
      modify($ouc){setCount($cnt + 1)}
      modify($ouc){setScore($scr + Math.abs($avgSubject.getValue() - $avgUser.getValue()))}

end

rule "Modify books"
  agenda-group "OtherUserScore"
  no-loop
  salience 6
  when
  $book: Book()
  $user : User($book memberOf readBooks)
  $subjectUser: SubjectUser($book not memberOf user.getReadBooks())
  $ouc: OtherUserScorer(id == $user.getId(), $cnt: count, $scr: score) @Watch(count, score)
  eval($ouc.getCount() != 0)
  then
  modify($book){setUserRecommendedScore($book.getUserRecommendedScore() + ((0.01*$cnt)*(1/($scr/($cnt)))))}
end
