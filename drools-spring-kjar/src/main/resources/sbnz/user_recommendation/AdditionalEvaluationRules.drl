import rs.sbnz.book_recommender.model.User
import rs.sbnz.book_recommender.model.Book
import java.util.List;

rule "Reward nobel prize"
  agenda-group "AdditionalEvaluation"
  no-loop
  when
  $book: Book(nobelPrize == true)
  $user: User($user_books: readBooks, user_id: id)
  numberOfNobelPrize($user, $num;)
  eval($num.intValue() >= 0)
  eval($num.intValue() < 10)
  then
  modify($book){setUserRecommendedScore($book.getUserRecommendedScore()+ (0.01*$num.doubleValue()))}
end

rule "Reward nobel prize medium"
  agenda-group "AdditionalEvaluation"
  no-loop
  when
  $book: Book(nobelPrize == true)
  $user: User($user_books: readBooks, user_id: id)
  numberOfNobelPrize($user, $num;)
  eval($num.intValue() >= 10)
  eval($num.intValue() < 50)
  then
  modify($book){setUserRecommendedScore($book.getUserRecommendedScore()+ (0.1+0.005*$num.doubleValue()))}
end

rule "Reward nobel prize high"
  agenda-group "AdditionalEvaluation"
  no-loop
  when
  $book: Book(nobelPrize == true)
  $user: User($user_books: readBooks, user_id: id)
  numberOfNobelPrize($user, $num;)
  eval($num.intValue() >= 50)
  then
  modify($book){setUserRecommendedScore($book.getUserRecommendedScore()+ (0.3+0.001*$num.doubleValue()))}
end

query numberOfNobelPrize(User user, Number $num)
    $num := Number()
    from accumulate($b:Book(nobelPrize == true)
    from user.getReadBooks(),
    count($b))
end

rule "Reward based on true event"
  agenda-group "AdditionalEvaluation"
  no-loop
  when
  $book: Book(basedOnRealEvent == true)
    $user: User($user_books: readBooks, user_id: id)
    $noReadBasedOnTrueEvent: Number(intValue >= 0)
        from accumulate($b:Book(basedOnRealEvent == true) from $user_books,
        count($b))
    then
    modify($book){setUserRecommendedScore($book.getUserRecommendedScore()+ (0.01*$noReadBasedOnTrueEvent.doubleValue()))}
end

rule "Test additional"
  agenda-group "AdditionalEvaluation"
  no-loop
  when
  $book : Book()
  then
  System.out.println($book.getTitle() + ": " + $book.getUserRecommendedScore());
end