import rs.sbnz.book_recommender.model.Book;
import java.util.List;

rule "Find best for user initialise"
	agenda-group "FindBest"
    salience 10
    when

        $bestList: List() and
        eval($bestList.size() < 5)
        $b: Book( $grade : userRecommendedScore, $id: id)
        $subjectUser: SubjectUser($user: user, $user_books: user.getReadBooks(),
                    user_id: user.getId(), $b not memberOf $user_books)
        $seriesInd: Number() from accumulate (
            $i: Book(series == $b.getSeries()) from $bestList,
            count($i)
        )
        eval($seriesInd.intValue() == 0)
    then
        modify($bestList){add($b)}
end

rule "Find best for user no series"
	agenda-group "FindBest"
    salience 9
    no-loop
    when
        $bestList: List() and
        eval($bestList.size() == 5)
        $b: Book( $grade : userRecommendedScore, $id: id)
        $subjectUser: SubjectUser($user: user, $user_books: user.getReadBooks(),
                    user_id: user.getId(), $b not memberOf $user_books)
        $bind: Number() from accumulate($u:Book(title == $b.getTitle() || series == $b.getSeries()) from $bestList, count($u))
        eval($bind.intValue() == 0)

        $minBookScore: Double()
              from accumulate($tempBook: Book($scr:userRecommendedScore) from $bestList,
              min($scr))
        $minBook: Book(userRecommendedScore == $minBookScore) from $bestList

        eval($minBook.getUserRecommendedScore() < $b.getUserRecommendedScore())
    then
        modify($bestList){remove($minBook)}
        modify($bestList){add($b)}
end

rule "Find best for user series"
	agenda-group "FindBest"
    salience 8
    no-loop
    when
        $bestList: List() and
        eval($bestList.size() == 5)
        $b: Book( $grade : userRecommendedScore, $id: id)
        $subjectUser: SubjectUser($user: user, $user_books: user.getReadBooks(),
            user_id: user.getId(), $b not memberOf $user_books)
        $bind: Number() from accumulate($u:Book(title == $b.getTitle() || series == $b.getSeries()) from $bestList, count($u))
        eval($bind.intValue() == 1)


        $minBook: Book(series == $b.getSeries()) from $bestList

        eval($minBook.getUserRecommendedScore() < $b.getUserRecommendedScore())
    then
        modify($bestList){remove($minBook)}
        modify($bestList){add($b)}
end

/*rule "Test best basic"
  agenda-group "FindBest"
  no-loop
  salience 8
  when
  $book : Book()
  then
  System.out.println("-----------------------------------------------------------\n");
  System.out.println($book.getTitle() + ": " + $book.getUserRecommendedScore());
end*/

rule "Test best advanced"
  agenda-group "FindBest"
  no-loop
  salience 7
  when
  $bestList: List()
  then
  System.out.println("PRESERIES\n***************************************************************\n");
  System.out.println($bestList.size());
  for(int i = 0; i < $bestList.size(); i++) {
    Book booki = (Book) $bestList.get(i);
    System.out.println(booki.getTitle() + ": " + booki.getUserRecommendedScore());
  }

end