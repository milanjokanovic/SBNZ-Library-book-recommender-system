import rs.sbnz.book_recommender.model.User
import rs.sbnz.book_recommender.model.Book
import rs.sbnz.book_recommender.model.Author
import rs.sbnz.book_recommender.model.Score
import java.util.List;

rule "Score user read authors"
  agenda-group "AuthorScore"
  no-loop
  when
  $author: Author($name : name)
  $book: Book(author.getName() == $name, book_id : id)
  $subjectUser: SubjectUser($user: user, $user_books: user.getReadBooks(), user_id: user.getId(),
  $book not memberOf user.getReadBooks())
  $noReadByAuthor: Number(intValue >= 0)
      from accumulate($pom:Book(author.getName() == $name) from $user_books,
      count($pom))
  userCumulativeAuthorScore($author, $user, $num;)
  then
      modify($book){setUserRecommendedScore($book.getUserRecommendedScore()+ ($noReadByAuthor.intValue()*$num*0.01))}
end

query userCumulativeAuthorScore(Author authorParam, User userParam , Double $num)
    $authorBooks: List() from accumulate(
        Book($b: this, author.getName() == authorParam.getName())
        from userParam.getReadBooks(),
        collectList($b)
    )
    eval($authorBooks.size() > 0)
    $num := Double()
    from accumulate(
        Book($scores: score) from $authorBooks and
        $userScore: List(size > 0) from collect(
            Score(user.getId() == userParam.getId()) from $scores
        ) and
        Score($sc: value) from $userScore,
        average($sc)
    )
end
