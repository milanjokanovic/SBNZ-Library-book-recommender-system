package alarms

import rs.sbnz.book_recommender.model.User;

declare SystemGradeEvent
    @role(event)
    @expires(250s)
    userId: Integer
end

declare SuspiciousUserAlarm
    @role(event)
    @expires(250s)
    userId: Integer
    reason: String
end

declare BlockUserScoringEvent
    @role(event)
    @expires(4h)
    userId: Integer
end

rule "Insert user grading event"
    agenda-group "UserAlarms"
	salience 10
    when
        $u: User(id: id)
    then
        SystemGradeEvent gradeEvent = new SystemGradeEvent();
        gradeEvent.setUserId(id);
        insert(gradeEvent);
end

rule "Potentially suspicious user alarm"
    agenda-group "UserAlarms"
    salience 7
    when
        User(id: id)
        $sde:SystemGradeEvent(userId == id)
        $num: Number(intValue > 9) from accumulate(
            $sde2: SystemGradeEvent(
                this != $sde,
                userId == id,
                this meets[1000s] $sde
            ),
            count($sde2)
        )
        not (SuspiciousUserAlarm(userId == id, this meets[250s] $sde))
    then
        SuspiciousUserAlarm alarm = new SuspiciousUserAlarm();
        alarm.setUserId(id);
        alarm.setReason("Too many book reviews in small time span");
        insert(alarm);
end


rule "Suspicious user alarm"
    agenda-group "UserAlarms"
    salience 5
    when
        User(id: id)
        $sde:SystemGradeEvent(userId == id)
        $num: Number(intValue > 19) from accumulate(
            $sde2: SystemGradeEvent(
                this != $sde,
                userId == id,
                this meets[1000s] $sde
            ),
            count($sde2)
        )
        SuspiciousUserAlarm(userId == id, reason == "Too many book reviews in small time span")
        not (BlockUserScoringEvent(userId == id))
    then
        BlockUserScoringEvent blockEvent = new BlockUserScoringEvent();
        blockEvent.setUserId(id);
        insert(blockEvent);
end

rule "Block User scoring ability"
    agenda-group "UserAlarms"
    salience 4
    when
        $u: User(id: id, blockedScoringFunction == 0)
        $bse: BlockUserScoringEvent(userId == id)
    then
        modify($u){setBlockedScoringFunction(1)}

end

rule "Remove User from memory"
    agenda-group "UserAlarms"
    salience 2
    when
        $u: User()
    then
        delete($u);
        drools.halt();

end

